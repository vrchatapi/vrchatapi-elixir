diff --git a/lib/vrchat/api/authentication.ex b/lib/vrchat/api/authentication.ex
index 7a28181..99451bf 100644
--- a/lib/vrchat/api/authentication.ex
+++ b/lib/vrchat/api/authentication.ex
@@ -238,7 +238,7 @@ defmodule VRChat.Authentication do
   - `{:error, Tesla.Env.t}` on failure
   """
   @spec get_current_user(Tesla.Env.client(), keyword()) ::
-          {:ok, VRChat.Model.CurrentUser.t()}
+          {:ok, Tesla.Env.client(), VRChat.Model.CurrentUser.t()}
           | {:ok, VRChat.Model.Error.t()}
           | {:error, Tesla.Env.t()}
   def get_current_user(connection, _opts \\ []) do
@@ -248,12 +248,25 @@ defmodule VRChat.Authentication do
       |> url("/auth/user")
       |> Enum.into([])
 
-    connection
-    |> Connection.request(request)
-    |> evaluate_response([
-      {200, VRChat.Model.CurrentUser},
-      {401, VRChat.Model.Error}
-    ])
+    with {:ok, response, conn} <-
+           connection
+           |> Connection.request(request)
+           |> VRChat.Middleware.assign_session(request) do
+      {:ok, value} = evaluate_response(response, [
+          {200, VRChat.Model.CurrentUser},
+          {401, VRChat.Model.Error}
+        ])
+
+      {:ok, conn, value}
+    end
+  end
+
+  def login(options) when is_list(options) do
+    with {:ok, conn, user} <-
+           VRChat.Connection.new(options)
+           |> get_current_user() do
+      {:ok, conn, user}
+    end
   end
 
   @doc """
@@ -412,7 +425,7 @@ defmodule VRChat.Authentication do
   - `{:error, Tesla.Env.t}` on failure
   """
   @spec verify2_fa(Tesla.Env.client(), VRChat.Model.TwoFactorAuthCode.t(), keyword()) ::
-          {:ok, VRChat.Model.Verify2FaResult.t()}
+          {:ok, Tesla.Env.client(), VRChat.Model.Verify2FaResult.t()}
           | {:ok, VRChat.Model.Error.t()}
           | {:error, Tesla.Env.t()}
   def verify2_fa(connection, two_factor_auth_code, _opts \\ []) do
@@ -423,12 +436,17 @@ defmodule VRChat.Authentication do
       |> add_param(:body, :body, two_factor_auth_code)
       |> Enum.into([])
 
-    connection
-    |> Connection.request(request)
-    |> evaluate_response([
-      {200, VRChat.Model.Verify2FaResult},
-      {401, VRChat.Model.Error}
-    ])
+    with {:ok, response, conn} <-
+           connection
+           |> Connection.request(request)
+           |> VRChat.Middleware.assign_session(request) do
+      {:ok, value} = evaluate_response(response, [
+        {200, VRChat.Model.Verify2FaResult},
+        {401, VRChat.Model.Error}
+      ])
+
+      {:ok, conn, value}
+    end
   end
 
   @doc """
